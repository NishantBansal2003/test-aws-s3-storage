name: CI

on:
  push:
    branches: [main]
  pull_request_target:
    branches: [main]
    types: [opened, synchronize, reopened, labeled]

jobs:
  format:
    name: Check Format and Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Go
        id: setup
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.9"

      - name: Check gofmt
        run: |
          fmt_result=$(gofmt -l .)
          if [ -n "$fmt_result" ]; then
            echo "The following files need to be formatted:"
            echo "$fmt_result"
            exit 1
          fi

      - name: Check golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1

  build:
    name: Build go-continuous-fuzz project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Go
        id: setup
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.9"

      - name: Set up Go environment variables
        run: |
          echo "export PATH=\$PATH:$(go env GOPATH)/bin" >> $GITHUB_ENV

      - name: Install dependencies
        run: go mod download

      - name: Build the project
        run: make build

  unit-test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      contains(github.event.pull_request.labels.*.name, 'safe-to-test')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Go
        id: setup
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.9"

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: make unit-test

  e2e-test:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      contains(github.event.pull_request.labels.*.name, 'safe-to-test')
    services:
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: s3
          DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
        ports:
          - 4566:4566

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set environment variables for LocalStack
        run: |
          echo "AWS_ACCESS_KEY_ID=test" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=test" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
          echo "AWS_ENDPOINT_URL=http://localhost:4566" >> $GITHUB_ENV

      - name: Create S3 bucket in LocalStack
        run: |
          aws --endpoint-url=http://localhost:4566 s3 mb s3://test-fuzz-bucket

      - name: Download seed_corpus into ~/corpus
        run: |
          mkdir -p "$HOME/corpus"
          curl -L \
            https://codeload.github.com/NishantBansal2003/go-fuzzing-example/tar.gz/fuzz-example \
            | tar -xz \
              --strip-components=2 \
              -C "$HOME/corpus" \
              go-fuzzing-example-fuzz-example/seed_corpus

      - name: Zip the corpus directory into corpus.zip
        run: |
          cd "$HOME"
          zip -r corpus.zip corpus

      - name: Upload corpus.zip to LocalStack S3
        run: |
          aws --endpoint-url=http://localhost:4566 s3 cp "$HOME/corpus.zip" s3://test-fuzz-bucket/corpus.zip

      - name: Set up Go
        id: setup
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.9"

      - name: Install dependencies
        run: go mod download

      - name: Run E2E tests
        run: make e2e-test
